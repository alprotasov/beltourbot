import os
import sys
import logging
import logging.config

LOG_DIR = os.getenv('LOG_DIR', 'logs')
LOG_FILE_PATH = os.path.join(LOG_DIR, os.getenv('LOG_FILE', 'app.log'))
LOG_LEVEL = os.getenv('LOG_LEVEL', 'INFO').upper()

LOGGING_CONFIG = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'default': {
            'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'default',
            'level': 'DEBUG',
            'stream': 'ext://sys.stdout',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'default',
            'level': 'INFO',
            'filename': LOG_FILE_PATH,
            'maxBytes': 10 * 1024 * 1024,
            'backupCount': 5,
            'encoding': 'utf-8',
        },
    },
    'root': {
        'handlers': ['console', 'file'],
        'level': LOG_LEVEL,
    },
    'loggers': {
        'aiogram': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'uvicorn.error': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'uvicorn.access': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

def setup_logging():
    handler_class = 'logging.handlers.RotatingFileHandler'
    try:
        import concurrent_log_handler
        handler_class = 'concurrent_log_handler.ConcurrentRotatingFileHandler'
    except ImportError:
        pass
    LOGGING_CONFIG['handlers']['file']['class'] = handler_class
    try:
        old_umask = os.umask(0)
        os.makedirs(LOG_DIR, mode=0o700, exist_ok=True)
        os.umask(old_umask)
        os.chmod(LOG_DIR, 0o700)
        logging.config.dictConfig(LOGGING_CONFIG)
        if os.path.exists(LOG_FILE_PATH):
            os.chmod(LOG_FILE_PATH, 0o600)
    except Exception:
        logging.basicConfig(
            level=LOG_LEVEL,
            format=LOGGING_CONFIG['formatters']['default']['format'],
            datefmt=LOGGING_CONFIG['formatters']['default']['datefmt'],
            stream=sys.stdout
        )
        logging.getLogger(__name__).exception('Failed to setup logging config, using basicConfig')