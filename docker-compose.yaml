version: "3.8"
services:
  bot:
    build:
      context: .
      dockerfile: Dockerfile
    secrets:
      - bot_token
      - postgres_password
    restart: on-failure
    depends_on:
      - db
      - redis
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .:/app:rw
    ports:
      - "${BOT_PORT:-8000}:8000"
    command: >
      sh -c 'set -e;
        until pg_isready -h db -U ${POSTGRES_USER}; do echo "Waiting for db"; sleep 1; done;
        until redis-cli -h redis ping | grep -q PONG; do echo "Waiting for redis"; sleep 1; done;
        export BOT_TOKEN=$(cat /run/secrets/bot_token);
        export POSTGRES_PASSWORD=$(cat /run/secrets/postgres_password);
        export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}";
        export REDIS_URL="redis://redis:6379/0";
        export CELERY_BROKER_URL="redis://redis:6379/0";
        export CELERY_RESULT_BACKEND="redis://redis:6379/0";
        exec uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload'
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    secrets:
      - postgres_password
    restart: on-failure
    depends_on:
      - db
      - redis
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .:/app:rw
    command: >
      sh -c 'set -e;
        until pg_isready -h db -U ${POSTGRES_USER}; do echo "Waiting for db"; sleep 1; done;
        until redis-cli -h redis ping | grep -q PONG; do echo "Waiting for redis"; sleep 1; done;
        export POSTGRES_PASSWORD=$(cat /run/secrets/postgres_password);
        export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}";
        export REDIS_URL="redis://redis:6379/0";
        export CELERY_BROKER_URL="redis://redis:6379/0";
        export CELERY_RESULT_BACKEND="redis://redis:6379/0";
        exec celery -A app.celery_app worker --loglevel=INFO'
  beat:
    build:
      context: .
      dockerfile: Dockerfile
    secrets:
      - postgres_password
    restart: on-failure
    depends_on:
      - db
      - redis
      - worker
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - .:/app:rw
    command: >
      sh -c 'set -e;
        until pg_isready -h db -U ${POSTGRES_USER}; do echo "Waiting for db"; sleep 1; done;
        until redis-cli -h redis ping | grep -q PONG; do echo "Waiting for redis"; sleep 1; done;
        export POSTGRES_PASSWORD=$(cat /run/secrets/postgres_password);
        export DATABASE_URL="postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}";
        export REDIS_URL="redis://redis:6379/0";
        export CELERY_BROKER_URL="redis://redis:6379/0";
        export CELERY_RESULT_BACKEND="redis://redis:6379/0";
        exec celery -A app.celery_app beat --loglevel=INFO'
  db:
    image: postgres:14.21-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    secrets:
      - postgres_password
  redis:
    image: redis:6.2.14-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  bot_token:
    file: ./secrets/bot_token.txt